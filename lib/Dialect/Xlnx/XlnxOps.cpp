//===- XlnxOps.cpp - Xlnx dialect ops --------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#include "circt/Dialect/Xlnx/XlnxOps.h"
#include "circt/Dialect/Xlnx/XlnxDialect.h"
#include "mlir/IR/OpAsmSupport.h"
#include "mlir/IR/Builders.h"
#include "mlir/IR/OpImplementation.h"
#include "mlir/Support/LLVM.h"
#include <cassert>

using namespace mlir;
using namespace circt;
using namespace circt::xlnx;

//===----------------------------------------------------------------------===//
// XlnxLutNOp
//===----------------------------------------------------------------------===//

static LogicalResult commonVerify(uint32_t numInputs, uint64_t initValue, InFlightDiagnostic &&diag) {
  if (numInputs < 1 || numInputs > 6) {
    return diag << "requires between 1 and 6 inputs, but got " 
                         << numInputs << " inputs";
  }
  do {
    static const uint64_t maxValues[] = {
      (1UL << (1UL << 1)) - 1, // 1 input
      (1UL << (1UL << 2)) - 1, // 2 inputs
      (1UL << (1UL << 3)) - 1, // 3 inputs
      (1UL << (1UL << 4)) - 1, // 4 inputs
      (1UL << (1UL << 5)) - 1, // 5 inputs
      (1UL << (1UL << 6)) - 1, // 6 inputs
    };
    if (initValue > maxValues[numInputs - 1]) {
      return diag << "INIT attribute value is too large for the number of inputs";
    }
  } while (0);
  return success();
}

LogicalResult XlnxLutNOp::verify() {
  return commonVerify(getInputs().size(), getINIT(), emitOpError());
}

LogicalResult XlnxLut1Op::verify() {
  return commonVerify(1, getINIT(), emitOpError());
}

LogicalResult XlnxLut2Op::verify() {
  return commonVerify(2, getINIT(), emitOpError());
}

LogicalResult XlnxLut3Op::verify() {
  return commonVerify(3, getINIT(), emitOpError());
}

LogicalResult XlnxLut4Op::verify() {
  return commonVerify(4, getINIT(), emitOpError());
}

LogicalResult XlnxLut5Op::verify() {
  return commonVerify(5, getINIT(), emitOpError());
}

LogicalResult XlnxLut6Op::verify() {
  return commonVerify(6, getINIT(), emitOpError());
}

//===----------------------------------------------------------------------===//
// TableGen generated logic.
//===----------------------------------------------------------------------===//

// Provide the autogenerated implementation guts for the Op classes.
#define GET_OP_CLASSES
#include "circt/Dialect/Xlnx/Xlnx.cpp.inc" 